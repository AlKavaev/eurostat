% !TeX root = RJwrapper.tex
\title{eurostat: R tools for eurostat open data}
\author{Leo Lahti, Janne Huovari, Markus Kainu, Przemyslaw Biecek}

\maketitle

\abstract{
An abstract of less than 150 words.
}

<<echo=FALSE>>=
  options(width=60)

  listing <- function(x, options) {
    paste("\\begin{lstlisting}[basicstyle=\\ttfamily,breaklines=true]\n",
      x, "\\end{lstlisting}\n", sep = "")
  }
  knit_hooks$set(source=listing, output=listing)
@


Introductory section which may include references in parentheses
\citep{R}.

Governmental institutions have started to release increasing amount of
their data resources for the public as open data in the recent
years. This is opening novel opportunities for research and citizen
science. Eurostat, for instance, provides a rich collection of
demographic and economic data through its open data portal. The portal
currently includes ... data sets on ... between years ...

Efficient tools to access and analyse such data collections can
greatly benefit reproducible research. When the data is available, the
analytical methodology spanning from raw data to the final publication
can also be made available following reproducible research principles
\citep{Gandrud13}. Standardization and automatization of
common data analysis tasks via dedicated software packages can greatly
facilitate reproducibility and code sharing, making the research more
transparent and efficient.

Here, we introduce the eurostat R package that implements automated
tools for R to access open data from
Eurostat \footnote{http://ec.europa.eu/eurostat} in
R \citep{R}. The package has been actively developed by several
independent contributors and based on the community feedback in
Github, and its first CRAN release was on.. We are now reporting the
first mature version of the package that has been improved and tested
by multiple users, and includes features like cache, handling dates,
and using the tidy data principles \citep{wickham2014}, with the help of
the tidyr R package \citep{tidyr}.

Despite many efforts to this direction, a dedicated R package for
eurostat open data has been missing. Our work extends our earlier CRAN
packages statfi \citep{statfi} and
smarterpoland \citep{smarterpoland}. Compared to this earlier work, we
have now implemented an expanded set of tools specifically focusing on
the eurostat data collection. The datamart \citep{datamart} and the
quandl \citep{quandl} R packages provide also access to certain
versions of eurostat data. In contrast to these generic database
packages, our work is fully focused on the Eurostat open data portal
and provides specific functionality suited for this data
collection. There is a development version for R package
reurostat\footnote{https://github.com/Tungurahua/reurostat} but it
does not seem to be actively maintained at the moment. The eurostat R
package takes advantage of the following external R packages:
devtools \citep{devtools}, dplyr \citep{dplyr}, knitr \citep{knitr},
ggplot2 \citep{ggplot2}, mapproj \citep{mapproj},
plotrix \citep{plotrix}, reshape2 \citep{reshape2},
rmarkdown \citep{rmarkdown}, stringi \citep{stringi},
testthat \citep{testthat}, tidyr \citep{tidyr}. The eurostat R package
is part of the rOpenGov project
\citep{Lahti13icml}, which provides reproducible research
tools for computational social science and digital humanities.


\section{Overview of the functionality}

<<2015-manu-initchunk, echo=FALSE, warning=FALSE, error=FALSE>>=
library(eurostat)
library(knitr)
@


This section may contain a figure such as Figure~\ref{figure:rlogo}.

\begin{figure}[htbp]
  \centering
  \includegraphics{Rlogo}
  \caption{The logo of R.}
  \label{figure:rlogo}
\end{figure}

The package includes tools to search and retrieve specific data sets
from the Eurostat open data portal, converting identifiers in
human-readable formats, selecting, modifying and visualizing the
data. Further examples are provided in the package
vignette\footnote{https://github.com/rOpenGov/eurostat/vignette/eurostat\_tutorial.Rmd},
and a blog
post\footnote{http://ropengov.github.io/r/2015/05/01/eurostat-package-examples}.

The unified interface to data sets can make data analysis more
straightforward and transparent by providing a standardized and
automated way to access the data sets. Here we describe the
functionality of the current CRAN release version (1.2.1). To install
this, simply use

<<2015-manu-install, echo=TRUE, warning=FALSE, error=FALSE, eval=FALSE>>=
install.packages("eurostat")
@

You can download the complete table of contents of the database with the function `get\_eurostat\_toc()`, or use `search\_eurostat()` to make a more focused search over the table of contents. To retrieve data sets for 'disposable income', for instance, use:


<<2015-manu-init, echo=TRUE, warning=FALSE, error=FALSE, eval=FALSE>>=
library(eurostat)
results <- search_eurostat("disposable income", type = "dataset")
library(knitr)
kable(head(results))
@

The data type to search for is also specified. The options include 'table', 'dataset' or 'folder', referring to different levels of hierarchy in data organization: a 'table' resides in 'dataset' that are stored in a 'folder'. You can focus the search on a selected type.

The first lines of the output are shown above. Use values from the `code` column to refer to a specific data set in the subsequent download commands. The dataset identifier codes can also be browsed at the Eurostat
database\footnote{http://ec.europa.eu/eurostat/data/database}, which gives
codes in the Data Navigation Tree after every dataset in parenthesis.

Download the selected data with `get\_eurostat()`. To retrieve the data set with a particular identifier, use 

<<2015-manu-getdata, echo=TRUE, warning=FALSE, error=FALSE, eval=FALSE>>=
dat <- get_eurostat(id, time_format = "num")
@

The original data is annual in this example, hence we have here
selected a numeric time variable as it is more convient for annual
time series than the default date format. To improve the
interpretability of the output, the eurostat variable identifiers
could be further replaced with human-readable labels based on
definitions from Eurostat dictionaries with the `label\_eurostat()`
function. The data is provided in the standard data.frame format, and
all standard tools for data subsetting and reshaping can be
conveniently applied.

The downloaded data sets are stored in cache by default. This can help
to avoid repeated downloading of identical data and helps to speed up
the analysis. Another advantage is that by storing an exact copy of
the data on the hard disk, it is possible to reproduce the analysis
results afterwards even if the source database has been updated.

Data sets containing geographic information can be visualized on a
map. Most indicators are of country-year -type, although some
indicators have data also at lower level of regional breakdown
%\footnote{http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm\?TargetUrl=DSP\_GEN\_DESC\_VIEW\_NOHDR\&StrNom=NUTS\_33\&StrLanguageCode=EN}.

The disposable income of private households at
NUTS2\footnote{http://en.wikipedia.org/wiki/Nomenclature\_of\_Territorial\_Units\_for\_Statistics}
level can be visualized, for instance, as in
Figure~\ref{fig:markus}. For a more detailed treatment of this
example, see our related blog
post\footnote{http://ropengov.github.io/r/2015/05/01/eurostat-package-examples}.


Here, we have combined the data retrieved with the eurostat package
with additional map visualization tools and utilities including
grid \citep{grid}, maptools \citep{maptools}, rgdal \citep{rgdal},
rgeos \citep{rgeos}, scales \citep{scales}, and
stringr \citep{stringr}.

Example on spatio-temporal data visualization: let us look at the indicator tgs00026\footnote{http://ec.europa.eu/eurostat/en/web/products-datasets/-/TGS00026}, (Disposable income of private households by NUTS 2 regions) from Eurostat. We are looking at the disposable household income. In addition to downloading and manipulating data from EUROSTAT, we demonstrate how to access and use shapefiles of Europe published by EUROSTAT at Administrative units / Statistical units\footnote{http://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units}.



\section{Another section}

There will likely be several sections, perhaps including code snippets, such as:

\begin{example}
  x <- 1:10
  result <- myFunction(x)
\end{example}



<<2015-manu-getdata, echo=FALSE, warning=FALSE, error=FALSE, eval=TRUE, fig.width=10, fig.height=7, out.width='1\\linewidth', fig.path='fig/', fig.align='center'>>=
# Clean the cache
clean_eurostat_cache()

# Load dependencies
PACKAGES <- c("rgdal","maptools","rgeos","stringr","scales","grid")
lapply(PACKAGES, require, character.only=T)

# Downloading and manipulating the tabular data
df <- get_eurostat("tgs00026", time_format = "raw")

# convert time column from Date to numeric
df$time <- eurotime2num(df$time)

# subset time to have data for 
df <- df[df$time %in% c(2005,2010,2011),]

# spread the data into wide format
library(tidyr)
dw <- spread(df, time, values)

# Downloading and manipulating the spatial data
# We download the zipped shapefile in 1:60 million scale from year
# 2010 and subset it at the level of NUTS2.
# Load the GISCO shapefile
download.file("http://ec.europa.eu/eurostat/cache/GISCO/geodatafiles/NUTS_2010_60M_SH.zip", destfile="NUTS_2010_60M_SH.zip")
# unzip
unzip("NUTS_2010_60M_SH.zip")

# read into SpatialPolygonsDataFrame
library(rgdal)
map <- readOGR(dsn = "./NUTS_2010_60M_SH/Data", layer = "NUTS_RG_60M_2010")

# subset the spatialpolygondataframe at NUTS2-level
map_nuts2 <- subset(map, STAT_LEVL_ == 2)

# Joining tabular data with spatial data
# Third, we will make the both datas of same length,
# give then identical rownames and then merge the tabular data with the
# spatial data.

# Spatial dataframe has 467 rows and attribute data 275.
# We need to make attribute data to have similar number of rows
NUTS_ID <- as.character(map_nuts2$NUTS_ID)
VarX <- rep(NA, 316)
dat <- data.frame(NUTS_ID,VarX)

# then we shall merge this with Eurostat data.frame
dat2 <- merge(dat, dw, by.x="NUTS_ID", by.y="geo", all.x=TRUE)

# merge this manipulated attribute data with the spatialpolygondataframe
# rownames
row.names(dat2) <- dat2$NUTS_ID
row.names(map_nuts2) <- as.character(map_nuts2$NUTS_ID)

# order data
dat2 <- dat2[order(row.names(dat2)), ]
map_nuts2 <- map_nuts2[order(row.names(map_nuts2)), ]

# join
library(maptools)
dat2$NUTS_ID <- NULL
shape <- spCbind(map_nuts2, dat2)

# Preparing the data for ggplot2 visualization
## fortify spatialpolygondataframe into data.frame
library(ggplot2)
library(rgeos)
shape$id <- rownames(shape@data)
map.points <- fortify(shape, region = "id")
map.df <- merge(map.points, shape, by = "id")

# As we want to plot map faceted by years from 2003 to 2011
# we have to melt it into long format
# (variable with numerical names got X-prefix during the spCbind-merge,
# therefore the X-prefix in variable names)
library(tidyr)

# lets convert unit variable (that is a list) into character
map.df$unit <- as.character(map.df$unit)
map.df.l <- gather(map.df, "year", "value", 15:17)

# year variable (variable) is class string and type X20xx.
# Lets remove the X and convert it to numerical
library(stringr)
map.df.l$year <- str_replace_all(map.df.l$year, "X","")
map.df.l$year <- factor(map.df.l$year)
map.df.l$year <- as.numeric(levels(map.df.l$year))[map.df.l$year]

# Plotting the maps using ggplot2
library(ggplot2)
library(scales)
library(grid)

# Creating a custom function for creating the breaks and makeing them look neat
categories <- function(x, cat = 5) {
  
  library(stringr)
  levs <- as.data.frame(as.character(levels(cut_interval(x, cat))))
  names(levs) <- "orig"
  levs$mod <- str_replace_all(levs$orig, "\\[", "")
  levs$mod <- str_replace_all(levs$mod, "\\]", "")
  levs$mod <- str_replace_all(levs$mod, "\\(", "")
  levs$lower <- gsub(",.*$","", levs$mod)
  levs$upper <- gsub(".*,","", levs$mod)
  
  levs$lower <- factor(levs$lower)
  levs$lower <- round(as.numeric(levels(levs$lower))[levs$lower],0)
  
  levs$upper <- factor(levs$upper)
  levs$upper <- round(as.numeric(levels(levs$upper))[levs$upper],0)
  
  levs$labs <- paste(levs$lower,levs$upper, sep=" - ")
  
  labs <- as.character(c(levs$labs))
  y <- cut_interval(x, cat, right = FALSE, labels = labs)
  y <- as.character(y)
  y[is.na(y)] <- "No Data"
  y <- factor(y, levels=c("No Data",labs[1:cat]))
}

# years for for loop - now show just one year
years <- unique(map.df.l$year)[[1]]

# Loop over the three years
for (year in years) {
  
  # subset data
  plot_map <- map.df.l[map.df.l$year == year,]
  # set the breaks
  plot_map$value_cat <- categories(plot_map$value)
  
  p <- ggplot(data=plot_map, aes(long,lat,group=group))
  p <- p + geom_polygon(data = map.df.l, aes(long,lat),fill=NA,colour="white",size = 1)
  p <- p + geom_polygon(aes(fill = value_cat),colour="white",size=.2)
  p <- p + scale_fill_manual(values=c("Dim Grey","#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641")) 
  p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
  p <- p + labs(title = paste0("Disposable household incomes in  ",year))
  p <- p +  theme(legend.position = c(0.03,0.40), 
                          legend.justification=c(0,0),
                          legend.key.size=unit(6,'mm'),
                          legend.direction = "vertical",
                          legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
                          legend.text=element_text(size=12), 
                          legend.title=element_text(size=12), 
                          title=element_text(size=16), 
                          panel.background = element_blank(), 
                          plot.background = element_blank(),
                          panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
                          panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
                          axis.text = element_blank(), 
                          axis.title = element_blank(), 
                          axis.ticks = element_blank(), 
                          plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
  p <- p + guides(fill = guide_legend(title = "EUR per Year",
                                     title.position = "top", 
                                     title.hjust=0))
}
@

\begin{figure}
<<2015-manu-mappic, echo=TRUE, warning=FALSE, error=FALSE, eval=TRUE, fig.width=10, fig.height=7, out.width='1\\linewidth', fig.align='center', fig.show='asis'>>=
print(p)
@
\label{fig:mapexample}
\caption{Map example}
\end{figure}


For the map example, look at Figure~\ref{fig:mapexample}.


\section{Further examples}

To make a triangle map from the plotrix \citep{plotrix}
package provides an example on visualizing passenger transport data
distributions (Figure~\ref{fig:xxx}):

<<2015-manu-searchdata, echo=TRUE, warning=FALSE, error=FALSE, eval=TRUE>>=
id <- search_eurostat("Modal split of passenger transport", 
        	             type = "table")$code[1]

dat <- get_eurostat(id, time_format = "num")

# Get labels for variable names
datl <- label_eurostat(dat)
label_eurostat_vars(names(datl))
dat_trains <- subset(datl, geo %in% c("Austria", "Belgium", "Finland", "Sweden")
                     & time %in% 2000:2012 
                     & vehicle == "Trains")

# Visualizing train passenger data
library(ggplot2)
p <- ggplot(dat_trains, aes(x = time, y = values, colour = geo)) 
p <- p + geom_line()
print(p)

# Triangle plot on passenger transport distributions with 2012 data for
# all countries with data 
library(tidyr)
transports <- spread(subset(dat, time == 2012,
	   select = c(geo, vehicle, values)), vehicle, values)

# triangle plot
library(plotrix)
triax.plot(na.omit(transports)[, -1], show.grid = TRUE, 
           label.points = TRUE, point.labels = transports$geo, 
           pch = 19)
@

To facilitate fast plotting of standard European geographic areas, the package provides ready-made lists of the country codes used in the eurostat database for EFTA (efta\_countries), Euro area (ea\_countries), EU (eu\_countries) and EU candidate countries (candidate\_countries). This helps to select specific groups of countries for closer investigation. For conversions with other standard country coding systems, see the countrycode R package \citep{countrycode}. To retrieve the eurostat country code list for EFTA, for instance, use:

<<2015-manu-searchdata, echo=TRUE, warning=FALSE, error=FALSE, eval=TRUE>>=
data(efta_countries)
kable(efta_countries)
@


\section{Applications}

The package or its predecessors have already been applied in several case studies by us and independent developers. Financial Times, for instance, have used R to access data from Eurostat\footnote{http://blog.revolutionanalytics.com/2015/04/financial-times-tracks-unemployment-with-r.html} using functions from SmarterPoland, the direct predecessor of our revised and expanded eurostat package.

The archivist R package\footnote{http://pbiecek.github.io/archivist} for archivisation of objects has exemplified\footnote{http://pbiecek.github.io/archivist/justGetIT.html} its functionality by using eurostat to plot the number of people killed by road accidents, showing a decreasing trend of road accidents in many countries.

<<2015-manu-roadaccidents, echo=TRUE, warning=FALSE, error=FALSE, eval=TRUE>>=
t1 <- get_eurostat("tsdtr420") %>%
  dplyr::filter(geo %in% c("UK", "SK", "FR", "PL", "ES", "PT", "LV"))
t1$Country <- t1$geo
ggplot(t1, aes(x = time, y = values, color=Country, group=Country, shape=Country)) +
  geom_point(size=4) + 
  geom_line() + theme_bw() + ggtitle("People killed in road accidents")+
  xlab("Year") + ylab("Number of killed people") + theme(legend.position="top")
@


We can also look at the distribution of BMI between different age groups:

<<2015-manu-bmi, echo=TRUE, warning=FALSE, error=FALSE, eval=TRUE>>=
summary(tmp1 <- get_eurostat("hlth_ehis_de1", time_format = "raw"))
tmp1 %>%
  dplyr::filter( isced97 == "TOTAL" ,
          sex != "T",
          age != "TOTAL", geo == "PL") %>%
  ggplot(aes(y=values, x=age, fill=bmi)) +
  geom_bar(stat="identity") +
  facet_wrap(~sex) + coord_flip() +
  theme(legend.position="top")
@
 



\section{Summary}

The eurostat R package provides convenient tools to access open data
from Eurostat. When automated access to the data sets is integrated
with data analytical tools from other packages, this allows a seamless
automation of the data analytical process from raw data access to
statistical analysis and the final publication.

The package source code can be freely used, modified and distributed
under the BSD-2-clause (modified FreeBSD) license. A reproducible
version of this article is available at .. and can be used to generate
the manuscript text along with up-to-date figures and tables with the
latest version of the eurostat data. Manuscript automation provides
transparent documentation with full algorithmic details on how to
access, preprocess, analyse, and report data and analyses, thus
serving a template for good reproducible research practice. The reproducible source code for this manuscript is available at eurostat github page\footnote{https://github.com/rOpenGov/eurostat/blob/master/vignettes/manuscript.Rmd}.

The package exemplifies also the challenges and possible solutions to
reproducible research and automated open data retrieval. Possible
future extensions and improvements include design of specific data
representation class structures. This could facilitate harmonization
of the data representation with similar governmental data sets and
subsequent tool development. The latest development version of the
package can be installed from Github by following the instructions at
the github site\footnote{https://github.com/rOpenGov/eurostat}. We welcome
issues, bug reports and other feedback via the development
site\footnote{https://github.com/ropengov/eurostat}.


\section*{Acknowledgements}

We are grateful to Eurostat\footnote{http://ec.europa.eu/eurostat} for
maintaining the open data portal and the
rOpenGov\footnote{https://github.ropengov.io} for supporting 
package development. This work has been partially funded by Academy of
Finland (decision 293316). We also wish to thank Juuso Parkkinen and Joona Lehtomaki for their feedback on this work.





\bibliography{RJreferences}

\address{Leo Lahti\\
  Department of Mathematics and Statistics\\
  PO Box 20014 University of Turku\\
  Finland\\}
\email{leo.lahti@iki.fi}

\address{Janne Huovari\\
  Affiliation\\
  Address\\
  Country\\}
\email{author2@work}

\address{Markus Kainu\\
  Affiliation\\
  Address\\
  Country\\}
\email{author3@work}

\address{Przemyslaw Biecek\\
  Affiliation\\
  Address\\
  Country\\}
\email{author3@work}
